def generate_byte_array(array_size: int, *args, checksum: bool = False) -> bytearray:
    """Generates a bytearray filled with data extracted from arguments within specified bit ranges.

    Args:
        checksum: checksum option
        array_size (int): The size of the bytearray to be generated.
        *args: Variable length argument list. Each argument should be a tuple containing:
            - The data value (int).
            - The starting bit index (inclusive) of the data within the generated bytearray.
            - The ending bit index (inclusive) of the data within the generated bytearray.

    Returns:
        bytearray: The generated bytearray filled with data extracted from arguments within specified bit ranges.

    This static method generates a bytearray with the specified size and fills it with data extracted
    from the provided arguments, where each argument represents a piece of data to be inserted
    into the bytearray. The data is inserted into the specified bit range within the bytearray.
    """
    byte_array = bytearray(array_size)

    for arg in args:
        data = int(arg[0])
        start_bit = int(arg[1])
        end_bit = int(arg[2])

        # Calculate start_byte, start_bit_offset, end_byte, end_bit_offset
        start_byte, start_bit_offset = divmod(start_bit, 8)
        end_byte, end_bit_offset = divmod(end_bit, 8)

        for byte_offset in range(start_byte, end_byte + 1):
            byte_value = 0
            # Iterate through each bit in the byte
            for bit_offset in range(8):
                # Calculate the bit index in the byte array
                current_bit = byte_offset * 8 + bit_offset

                # Check if the current bit falls within the specified range
                if start_bit <= current_bit <= end_bit:
                    # Extract the bit value from the data and set it in the byte_value
                    bit_value = (data >> (current_bit - start_bit)) & 1
                    byte_value |= bit_value << bit_offset

            # Store the byte_value in the byte array
            byte_array[byte_offset] |= byte_value

    if checksum:
        byte_array[7] = (byte_array[0] ^ byte_array[1] ^ byte_array[2] ^ byte_array[3] ^
                         byte_array[4] ^ byte_array[5] ^ byte_array[6])

    return byte_array


def print_byte_array(byte_array):
    hex_string = ' '.join(format(byte, '02x') for byte in byte_array)
    ascii_string = ''.join(chr(byte) if 32 <= byte <= 126 else '.' for byte in byte_array)

    for i in range(0, len(byte_array), 16):
        chunk_hex = hex_string[i * 3:i * 3 + 32 * 3].strip()
        chunk_ascii = ascii_string[i:i + 16]
        print(f"{chunk_hex.ljust(48)} {chunk_ascii}")


if __name__ == '__main__':
    # throttle test

    vehicle_drive_control_enable = 1
    drive_mode_control = 3
    gear_control = 3
    vehicle_speed_control = 50.00
    vehicle_throttle_control = 100.0
    throttle_cycle_count = 15

    vehicle_drive_control_enable = (vehicle_drive_control_enable, 0, 0)
    drive_mode_control = (drive_mode_control, 2, 3)
    gear_control = (gear_control, 4, 5)

    vehicle_speed_control_lower = (int(vehicle_speed_control / 0.01) & 0xFF, 8, 15)
    vehicle_speed_control_upper = ((int(vehicle_speed_control / 0.01) >> 8) & 0xFF, 16, 23)

    vehicle_throttle_control_lower = (int(vehicle_throttle_control / 0.1) & 0xFF, 24, 31)
    vehicle_throttle_control_upper = ((int(vehicle_throttle_control / 0.1) >> 8) & 0b11, 32, 33)

    cycle_count = (throttle_cycle_count, 48, 51)

    ret = generate_byte_array(8, vehicle_drive_control_enable,
                              drive_mode_control,
                              gear_control,
                              vehicle_speed_control_lower,
                              vehicle_speed_control_upper,
                              vehicle_throttle_control_lower,
                              vehicle_throttle_control_upper,
                              cycle_count,

                              checksum=True)

    print(f'throttle control {ret}')
    print_byte_array(ret)

    # brake test

    vehicle_brake_control_enable = 1
    vehicle_brake_light_control = 1
    vehicle_brake_control = 100.0
    parking_control = 3
    brake_cycle_count = 15

    vehicle_brake_control_enable = (vehicle_brake_control_enable, 0, 0)
    vehicle_brake_light_control = (vehicle_brake_light_control, 1, 1)
    vehicle_brake_control_lower = (int(vehicle_brake_control / 0.1) & 0xFF, 8, 15)
    vehicle_brake_control_upper = ((int(vehicle_brake_control / 0.1) >> 8) & 0b11, 16, 17)

    parking_control = (parking_control, 24, 25)

    breke_cycle_count = (brake_cycle_count, 48, 51)

    ret = generate_byte_array(8, vehicle_brake_control_enable,
                              vehicle_brake_light_control,
                              vehicle_brake_control_lower,
                              vehicle_brake_control_upper,
                              parking_control,
                              breke_cycle_count, checksum=True)
    print(f'brake control {ret}')
    print_byte_array(ret)

    # steer ctrl test
    vehicle_steering_control_enable = 0
    steering_mode_control = 0
    vehicle_steering_control_front = -500
    vehicle_steering_control_rear = -500
    vehicle_steering_wheel_speed_control = 250
    steer_cycle_count = 15

    vehicle_steering_control_enable = (vehicle_steering_control_enable, 0, 0)
    steering_mode_control = (steering_mode_control, 4, 7)

    vehicle_steering_control_front_lower = (vehicle_steering_control_front & 0xFF, 8, 15)
    vehicle_steering_control_front_upper = ((vehicle_steering_control_front >> 8) & 0xFF, 16, 23)

    vehicle_steering_control_rear_lower = (vehicle_steering_control_rear & 0xFF, 24, 32)
    vehicle_steering_control_rear_upper = ((vehicle_steering_control_rear >> 8) & 0xFF, 32, 39)

    vehicle_steering_wheel_speed_control = (vehicle_steering_wheel_speed_control / 2, 40, 47)
    steer_cycle_count = (steer_cycle_count, 48, 51)

    ret = generate_byte_array(8, vehicle_steering_control_enable,
                              steering_mode_control,
                              vehicle_steering_control_front_lower,
                              vehicle_steering_control_front_upper,
                              vehicle_steering_control_rear_lower,
                              vehicle_steering_control_rear_upper,
                              vehicle_steering_wheel_speed_control,
                              cycle_count, checksum=True)

    print(f'steer control {ret}')
    print_byte_array(ret)

    # vehicle ctrl test
    # wheel torque ctrl test
    left_front_motor_torque = 20
    right_front_motor_torque = 20
    left_rear_motor_torque = 20
    right_rear_motor_torque = 20

    left_front_motor_torque_lower = (int(left_front_motor_torque / 0.1) & 0xFF, 0, 7)
    left_front_motor_torque_upper = ((int(left_front_motor_torque / 0.1) >> 8) & 0xFF, 8, 15)

    right_front_motor_torque_lower = (int(right_front_motor_torque / 0.1) & 0xFF, 16, 23)
    right_front_motor_torque_upper = ((int(right_front_motor_torque / 0.1) >> 8) & 0xFF, 24, 31)

    left_rear_motor_torque_lower = (int(left_rear_motor_torque / 0.1) & 0xFF, 32, 39)
    left_rear_motor_torque_upper = ((int(left_rear_motor_torque / 0.1) >> 8) & 0xFF, 40, 47)

    right_rear_motor_torque_lower = (int(right_rear_motor_torque / 0.1) & 0xFF, 48, 55)
    right_rear_motor_torque_upper = ((int(right_rear_motor_torque / 0.1) >> 8) & 0xFF, 56, 63)

    ret = generate_byte_array(8, left_front_motor_torque_lower,
                              left_front_motor_torque_upper,
                              right_front_motor_torque_lower,
                              right_front_motor_torque_upper,
                              left_rear_motor_torque_lower,
                              left_rear_motor_torque_upper,
                              right_rear_motor_torque_lower,
                              right_rear_motor_torque_upper, checksum=False)

    print(f'wheel control {ret}')
    print_byte_array(ret)
