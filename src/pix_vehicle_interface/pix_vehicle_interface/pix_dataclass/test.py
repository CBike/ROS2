def generate_byte_array(array_size: int, *args) -> bytearray:
    """Generates a bytearray filled with data extracted from arguments within specified bit ranges.

    Args:
        array_size (int): The size of the bytearray to be generated.
        *args: Variable length argument list. Each argument should be a tuple containing:
            - The data value (int).
            - The starting bit index (inclusive) of the data within the generated bytearray.
            - The ending bit index (inclusive) of the data within the generated bytearray.

    Returns:
        bytearray: The generated bytearray filled with data extracted from arguments within specified bit ranges.

    This static method generates a bytearray with the specified size and fills it with data extracted
    from the provided arguments, where each argument represents a piece of data to be inserted
    into the bytearray. The data is inserted into the specified bit range within the bytearray.
    """
    byte_array = bytearray(array_size)

    for arg in args:
        data = int(arg[0])
        start_bit = int(arg[1])
        end_bit = int(arg[2])

        # Calculate start_byte, start_bit_offset, end_byte, end_bit_offset
        start_byte, start_bit_offset = divmod(start_bit, 8)
        end_byte, end_bit_offset = divmod(end_bit, 8)

        # Fill data bits into the byte array
        for byte_index in range(start_byte, end_byte + 1):
            byte = 0

            # Iterate through each bit in the byte
            for bit_offset in range(8):
                # Calculate the bit index in the byte array
                # 인덱스 0번 부터
                current_bit = byte_index * 8 + bit_offset

                # Check if the current bit falls within the specified range
                if start_bit <= current_bit <= end_bit:
                    # Extract the bit value from the data and set it in the byte
                    bit_value = (data >> (current_bit - start_bit)) & 1
                    byte |= bit_value << bit_offset

            # Store the byte in the byte array
            byte_array[byte_index] = byte

    return byte_array


gear_en_ctrl = (1, 0, 0)
gear_target = (3, 8, 10)
checksum = (244, 56, 63)
result = generate_byte_array(8, gear_en_ctrl, gear_target, checksum)
print(result)
print(0xf4)